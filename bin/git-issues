#!/usr/bin/env ruby

require 'thor'
require 'bitbucket_rest_api'
require 'zlog'
require 'highline/import'
require 'git-issues'

class GitIssuesCLI < Thor
  Log = Logging.logger[self]
  GI = GitIssues.new
  CLI = HighLine.new

  desc "list", "list issues of a repository"
  method_options :all => :boolean
  def list
    issues = bitbucket.issues.list_repo(repo['user'], repo['repo'])

    # filter closed issues if the user doesn't want all
    if not options.all
      issues = issues.find_all{|i|
        'resolved' != i['status']
      }
    end

    issues.each do |i|
      puts "%-3i | %-8s | %s" % [ i['local_id'], i['status'], i['title'] ]
    end
    nil
  end

  desc "add <title> <content>", "add a new issue"
  def add( title, content )
    bitbucket.issues.create( repo['user'], repo['repo'], {
      title:    title,
      content:  content
      })
  end

  desc "delete <id>", "delete an issue"
  def delete( id )
    bitbucket.issues.delete( repo['user'], repo['repo'], id)
  end

  desc "cli", "open a cli"
  def cli
    require 'pry'
    binding.pry
  end

  private

  def repo path = '.'
    @repo ||= getRepo path
  end

  def bitbucket
    init_bitbucket if @bitbucket.nil?
    @bitbucket
  end

  def getRepo path
    repos = GI.gitReposFor '.'
    if repos.empty?
      Log.abort "No known repositories found."
    end
    Log.info "Using: #{repos.first.repo_url}"
    repos.first
  end

  def init_bitbucket
    user = 'arlimus'
    password = get_password("Enter password for #{user}")
    @bitbucket = BitBucket.new login: user, password: password
  end

  def get_password(prompt="Enter Password")
    CLI.ask(prompt){|q| q.echo = '*'}
  end

end

GitIssuesCLI.start(ARGV)
