#!/usr/bin/env ruby

require 'thor'
require 'zlog'
require 'git-issues'

Zlog.init_stdout loglevel: :debug

class GitIssuesCLI < Thor
  Log = Logging.logger[self]
  GI = GitIssues.new

  desc "list", "list issues of a repository"
  method_options :all => :boolean
  def list opts = {}
    o = ({
      all: (options.all)
    }).merge(opts)

    issues = repo.issues_list o
    issues.
      sort_by{|i| i['number']}.
      reverse.
      each do |i|
      puts "%-3i | %-8s | %s" % [ i['number'], i['state'], i['title'] ]
    end
    nil
  end

  desc "add <title> [<content>]", "add a new issue"
  def add( title, content = nil )
    r = repo.issue_create title, content
    Log.ok "created issue #{r}" if r.instance_of?(Fixnum)
  end

  desc "delete <id>", "delete an issue"
  def delete( id )
    repo.issue_delete id
  end

  desc "cli", "open a cli"
  def cli
    require 'pry'
    binding.pry
  end

  default_task "list"

  private

  def repo path = '.'
    @repo ||= getRepo path
  end

  def getRepo path
    repos = GI.gitReposFor '.'
    if repos.empty?
      Log.abort "No known repositories found."
    end
    Log.info "Using: #{repos.first.repo_url}"
    repos.first
  end

end

GitIssuesCLI.start(ARGV)
